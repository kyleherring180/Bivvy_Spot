// <auto-generated />
using System;
using BivvySpot.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;

#nullable disable

namespace BivvySpot.Data.Migrations
{
    [DbContext(typeof(BivvySpotContext))]
    [Migration("20251022194347_Edit_PostDifficulty_Configuration")]
    partial class Edit_PostDifficulty_Configuration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BivvySpot.Data.DictionaryEntity<BivvySpot.Model.Enums.ActivityType>", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Dictionary_ActivityType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Alpine"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Ice"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Mixed"
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "Rock"
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = "SkiMountaineering"
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = "Hiking"
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = "TrailRunning"
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = "Bouldering"
                        },
                        new
                        {
                            Id = (byte)9,
                            Name = "ViaFerrata"
                        });
                });

            modelBuilder.Entity("BivvySpot.Data.DictionaryEntity<BivvySpot.Model.Enums.GpxStatus>", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Dictionary_GpxStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Name = "Uploaded"
                        },
                        new
                        {
                            Id = (byte)1,
                            Name = "Validated"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Derived"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Error"
                        });
                });

            modelBuilder.Entity("BivvySpot.Data.DictionaryEntity<BivvySpot.Model.Enums.InteractionType>", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Dictionary_InteractionType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Like"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Save"
                        });
                });

            modelBuilder.Entity("BivvySpot.Data.DictionaryEntity<BivvySpot.Model.Enums.LocationType>", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Dictionary_LocationType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Peak"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Hut"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Trailhead"
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "Crag"
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = "Region"
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = "Range"
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = "Country"
                        });
                });

            modelBuilder.Entity("BivvySpot.Data.DictionaryEntity<BivvySpot.Model.Enums.PostStatus>", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Dictionary_PostStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Name = "Draft"
                        },
                        new
                        {
                            Id = (byte)1,
                            Name = "Published"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Hidden"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Flagged"
                        });
                });

            modelBuilder.Entity("BivvySpot.Data.DictionaryEntity<BivvySpot.Model.Enums.ReportStatus>", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Dictionary_ReportStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Name = "Open"
                        },
                        new
                        {
                            Id = (byte)1,
                            Name = "Resolved"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Dismissed"
                        });
                });

            modelBuilder.Entity("BivvySpot.Data.DictionaryEntity<BivvySpot.Model.Enums.Season>", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Dictionary_Season", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)0,
                            Name = "Unknown"
                        },
                        new
                        {
                            Id = (byte)1,
                            Name = "Summer"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Winter"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "MultiSeason"
                        });
                });

            modelBuilder.Entity("BivvySpot.Data.DictionaryEntity<BivvySpot.Model.Enums.SuggestionStatus>", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("Dictionary_SuggestionStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Open"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivityType")
                        .HasColumnType("int");

                    b.Property<string>("DifficultyRating")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("ActivityType", "DifficultyRating")
                        .IsUnique();

                    b.ToTable("Difficulties");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.GpxTrack", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AscentM")
                        .HasColumnType("int");

                    b.Property<Polygon>("Bbox")
                        .HasColumnType("geography");

                    b.Property<string>("ChecksumSha256")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<bool>("HasTimestamps")
                        .HasColumnType("bit");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PreviewGeoJsonKey")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("GpxTracks", t =>
                        {
                            t.HasCheckConstraint("CK_Gpx_AscentM_NonNegative", "[AscentM] >= 0");

                            t.HasCheckConstraint("CK_Gpx_Distance_NonNegative", "[Distance] >= 0");

                            t.HasCheckConstraint("CK_Gpx_SizeBytes_NonNegative", "[SizeBytes] >= 0");
                        });
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Interaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId", "PostId", "InteractionType")
                        .IsUnique();

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Polygon>("Boundary")
                        .HasColumnType("geography");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<double?>("Elevation")
                        .HasColumnType("float");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Point>("Point")
                        .HasColumnType("geography");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ParentId", "Name", "LocationType")
                        .IsUnique()
                        .HasFilter("[ParentId] IS NOT NULL");

                    b.ToTable("Locations", t =>
                        {
                            t.HasCheckConstraint("CK_Location_Elevation_NonNegative", "[Elevation] IS NULL OR [Elevation] >= 0");
                        });
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.LocationAltName", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId", "Name", "Language")
                        .IsUnique()
                        .HasFilter("[Language] IS NOT NULL");

                    b.ToTable("LocationAltNames");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.LocationSuggestion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ApprovedLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Point>("Point")
                        .IsRequired()
                        .HasColumnType("geography");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("SubmittedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("LocationSuggestions");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("ElevationGain")
                        .HasColumnType("int");

                    b.Property<int>("LikeCount")
                        .HasColumnType("int");

                    b.Property<string>("RouteName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SaveCount")
                        .HasColumnType("int");

                    b.Property<int>("Season")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("Status", "CreatedDate");

                    b.ToTable("Posts", t =>
                        {
                            t.HasCheckConstraint("CK_Post_Duration_NonNegative", "\"Duration\" >= 0");

                            t.HasCheckConstraint("CK_Post_ElevationGain_NonNegative", "\"ElevationGain\" >= 0");

                            t.HasCheckConstraint("CK_Post_LikeCount_NonNegative", "\"LikeCount\" >= 0");

                            t.HasCheckConstraint("CK_Post_SaveCount_NonNegative", "\"SaveCount\" >= 0");
                        });
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.PostDifficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DifficultyId");

                    b.HasIndex("PostId")
                        .IsUnique();

                    b.ToTable("PostDifficulties");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.PostLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PostId", "LocationId")
                        .IsUnique();

                    b.HasIndex("PostId", "Order")
                        .IsUnique();

                    b.ToTable("PostLocations", t =>
                        {
                            t.HasCheckConstraint("CK_PostLocation_Order_NonNegative", "\"Order\" >= 0");
                        });
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.PostPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AltText")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Caption")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("StorageKey")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId", "SortOrder")
                        .IsUnique();

                    b.ToTable("PostPhotos", t =>
                        {
                            t.HasCheckConstraint("CK_PostPhoto_Height_NonNegative", "\"Height\" >= 0");

                            t.HasCheckConstraint("CK_PostPhoto_SortOrder_NonNegative", "\"SortOrder\" >= 0");

                            t.HasCheckConstraint("CK_PostPhoto_Width_NonNegative", "\"Width\" >= 0");
                        });
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.PostTag", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.HasIndex("PostId", "TagId")
                        .IsUnique();

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ModeratorNote")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ReporterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ResolvedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ResolvedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("ResolvedBy");

                    b.HasIndex("Status");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthProvider")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("AuthSubject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("DeletedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasFilter("[DeletedDate] IS NULL");

                    b.HasIndex("AuthProvider", "AuthSubject")
                        .IsUnique()
                        .HasFilter("[AuthProvider] IS NOT NULL AND [AuthSubject] IS NOT NULL AND [DeletedDate] IS NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.GpxTrack", b =>
                {
                    b.HasOne("BivvySpot.Model.Entities.Post", "Post")
                        .WithMany("GpxTracks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Interaction", b =>
                {
                    b.HasOne("BivvySpot.Model.Entities.Post", "Post")
                        .WithMany("Interactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BivvySpot.Model.Entities.User", "User")
                        .WithMany("Interactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Location", b =>
                {
                    b.HasOne("BivvySpot.Model.Entities.Location", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.LocationAltName", b =>
                {
                    b.HasOne("BivvySpot.Model.Entities.Location", "Location")
                        .WithMany("AltNames")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Post", b =>
                {
                    b.HasOne("BivvySpot.Model.Entities.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.PostComment", b =>
                {
                    b.HasOne("BivvySpot.Model.Entities.PostComment", "Parent")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BivvySpot.Model.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BivvySpot.Model.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.PostDifficulty", b =>
                {
                    b.HasOne("BivvySpot.Model.Entities.Difficulty", "Difficulty")
                        .WithMany("PostDifficulties")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BivvySpot.Model.Entities.Post", "Post")
                        .WithOne("PostDifficulty")
                        .HasForeignKey("BivvySpot.Model.Entities.PostDifficulty", "PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.PostLocation", b =>
                {
                    b.HasOne("BivvySpot.Model.Entities.Location", "Location")
                        .WithMany("PostLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BivvySpot.Model.Entities.Post", "Post")
                        .WithMany("PostLocations")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.PostPhoto", b =>
                {
                    b.HasOne("BivvySpot.Model.Entities.Post", "Post")
                        .WithMany("Photos")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.PostTag", b =>
                {
                    b.HasOne("BivvySpot.Model.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BivvySpot.Model.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Report", b =>
                {
                    b.HasOne("BivvySpot.Model.Entities.Post", "Post")
                        .WithMany("Reports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BivvySpot.Model.Entities.User", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BivvySpot.Model.Entities.User", "Resolver")
                        .WithMany()
                        .HasForeignKey("ResolvedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Post");

                    b.Navigation("Reporter");

                    b.Navigation("Resolver");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Difficulty", b =>
                {
                    b.Navigation("PostDifficulties");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Location", b =>
                {
                    b.Navigation("AltNames");

                    b.Navigation("Children");

                    b.Navigation("PostLocations");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GpxTracks");

                    b.Navigation("Interactions");

                    b.Navigation("Photos");

                    b.Navigation("PostDifficulty");

                    b.Navigation("PostLocations");

                    b.Navigation("PostTags");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.PostComment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("BivvySpot.Model.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Interactions");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
